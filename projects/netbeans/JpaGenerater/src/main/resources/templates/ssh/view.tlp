package ${entity.packagePrefix}.view;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import ${entity.packagePrefix}.view.UserView;
<#list entity.entityMappingList as mapping>
    <#if (mapping.mappingType == 2)>
import ${entity.packagePrefix}.entity.${mapping.slaveClass}View;
    <#elseif (mapping.mappingType == 3)>
import ${entity.packagePrefix}.entity.${mapping.masterClass}View;
    <#elseif (mapping.mappingType == 4)>
import ${entity.packagePrefix}.entity.${mapping.slaveClass}View;
    </#if>
</#list>

/**
 * Description ${entity.comment}
 * CreateDate ${entity.createTime}
 * @author ${entity.author}
 */
public class ${entity.entityName}View implements Serializable {

    private static final long serialVersionUID = 1L;

<#if (entity.entityId.entityIdList?size > 1)>
<#elseif (entity.entityId.entityIdList?size == 1)>
    <#assign eid=entity.entityId.entityIdList[0] />
    /**
     * <#if (eid.prop??)>${eid.prop.comment}</#if>
     */
    private ${eid.typeName} ${eid.name};
</#if>

<#list entity.propList as prop>
    /**
     * ${prop.comment}
     */
  <#if (prop.name == "createId")>
    private UserEntity creater;
  <#elseif (prop.name == "updateId")>
    private UserEntity updater;
  <#else>
    private ${prop.typeName} ${prop.name};
  </#if>
</#list>

<#list entity.entityMappingList as mapping>
    /**
     * <#if (mapping.prop??)>${mapping.prop.comment}</#if>
     */
  <#if (mapping.mappingType == 2)>
    private List<${mapping.slaveClass}View> ${toLowerFirst(mapping.slaveClass)}s;
  <#elseif (mapping.mappingType == 3)>
    private ${mapping.masterClass}View ${toLowerFirst(mapping.masterClass)};
  <#elseif (mapping.mappingType == 4)>
    private List<${mapping.slaveClass}View> ${toLowerFirst(mapping.slaveClass)}s;
  </#if>
</#list>

    public ${entity.entityName}View() {

    }

    public ${entity.entityName}View(${entity.entityName}Entity entity) {
<#list entity.propList as prop>
  <#if (prop.name != "createId" && prop.name != "updateId")>
        this.set${toUpperFirst(prop.name)}(entity.get${toUpperFirst(prop.name)}());
  </#if>
</#list>
    }

<#if (entity.entityId.entityIdList?size > 1)>
<#elseif (entity.entityId.entityIdList?size == 1)>
  <#list entity.entityId.entityIdList as eid>
    public void set${toUpperFirst(eid.name)} (${eid.typeName} ${eid.name}) {
        this.${eid.name} = ${eid.name};
    }

    public ${eid.typeName} get${toUpperFirst(eid.name)}() {
        return ${eid.name};
    }

  </#list>
</#if>
<#list entity.propList as prop>
  <#if (prop.name == "createId")>
    public void set${toUpperFirst(prop.name)} (UserView creater) {
        this.creater = ${prop.name};
    }

    public UserEntity get${toUpperFirst(prop.name)}() {
        return creater;
    }

  <#elseif (prop.name == "updateId")>
    public void set${toUpperFirst(prop.name)} (UserView updater) {
        this.updater = updater;
    }

    public UserEntity get${toUpperFirst(prop.name)}() {
        return updater;
    }

  <#else>
    public void set${toUpperFirst(prop.name)} (${prop.typeName} ${prop.name}) {
        this.${prop.name} = ${prop.name};
    }

    public ${prop.typeName} get${toUpperFirst(prop.name)}() {
        return ${prop.name};
    }

  </#if>
</#list>
<#list entity.entityMappingList as mapping>
 <#if (mapping.prop??)>
  <#if (mapping.mappingType == 2)>
    public void set${toUpperFirst(mapping.slaveClass)}s (List<${mapping.slaveClass}View> ${toLowerFirst(mapping.slaveClass)}s) {
        this.${toLowerFirst(mapping.slaveClass)}s = ${toLowerFirst(mapping.slaveClass)}s;
    }

    public List<${mapping.slaveClass}View> get${toUpperFirst(mapping.slaveClass)}() {
        return ${toLowerFirst(mapping.slaveClass)}s;
    }

  <#elseif (mapping.mappingType == 3)>
    public void set${toUpperFirst(mapping.masterClass)} (${mapping.masterClass}View ${toLowerFirst(mapping.masterClass)}) {
        this.${toLowerFirst(mapping.masterClass)} = ${toLowerFirst(mapping.masterClass)};
    }

    public ${mapping.masterClass}View get${toUpperFirst(mapping.masterClass)}() {
        return ${toLowerFirst(mapping.masterClass)};
    }

  <#elseif (mapping.mappingType == 4)>
    public void set${toUpperFirst(mapping.slaveClass)}s (List<${mapping.slaveClass}View> ${toLowerFirst(mapping.slaveClass)}s) {
        this.${toLowerFirst(mapping.slaveClass)}s = ${toLowerFirst(mapping.slaveClass)}s;
    }

    public List<${mapping.slaveClass}View> get${toUpperFirst(mapping.slaveClass)}() {
        return ${toLowerFirst(mapping.slaveClass)}s;
    }

  </#if>
 </#if>
</#list>

}
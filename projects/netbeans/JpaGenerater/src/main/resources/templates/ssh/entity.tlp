package ${entity.packagePrefix}.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.GeneratedValue;
import javax.persistence.SequenceGenerator;
import javax.persistence.GenerationType;

import ${entity.packagePrefix}.entity.UserEntity;
<#list entity.entityMappingList as mapping>
    <#if (mapping.mappingType == 2)>
import ${entity.packagePrefix}.entity.${mapping.slaveClass};
    <#elseif (mapping.mappingType == 3)>
import ${entity.packagePrefix}.entity.${mapping.masterClass};
    <#elseif (mapping.mappingType == 4)>
import ${entity.packagePrefix}.entity.${mapping.slaveClass};
    </#if>
</#list>

/**
 * Description ${entity.comment}
 * CreateDate ${entity.createTime}
 * @author ${entity.author}
 */
@Entity
@Table(name = "${entity.tableName}")
public class ${entity.entityName}Entity implements Serializable {

        private static final long serialVersionUID = 1L;
    
<#if (entity.entityId.entityIdList?size > 1)>
        
<#elseif (entity.entityId.entityIdList?size == 1)>
        <#assign eid=entity.entityId.entityIdList[0] />
        /**
         * <#if (eid.prop??)>${eid.prop.comment}</#if>
         */
        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequence")
        @SequenceGenerator(name = "sequence", sequenceName = "${entity.tableName}_SEQUENCE", allocationSize = 1)
        @Column(name = "${eid.columnName}"<#if (eid.length > 0)>, length=${eid.length}</#if>)
        private ${eid.typeName} ${eid.name};
</#if>

<#list entity.propList as prop>
        /**
         * ${prop.comment}
         */
    <#if (prop.name == "createId")>
        @ManyToOne(fetch = FetchType.LAZY, optional = true, cascade = CascadeType.REFRESH, targetEntity = VehicleTypeEntity.class)
        @JoinColumn(name = "CREATE_ID")
        private UserEntity ${prop.name};
    <#elseif (prop.name == "updateId")>
        @ManyToOne(fetch = FetchType.LAZY, optional = true, cascade = CascadeType.REFRESH, targetEntity = VehicleTypeEntity.class)
        @JoinColumn(name = "UPDATES_ID")
        private UserEntity ${prop.name};
    <#else>
        @Column(name = "${prop.columnName}"<#if (prop.length > 0)>, length=${prop.length}</#if>)
        private ${prop.typeName} ${prop.name};
    </#if>
</#list>
<#list entity.entityMappingList as mapping>
        /**
         * <#if (mapping.prop??)>${mapping.prop.comment}</#if>
         */
    <#if (mapping.mappingType == 2)>
        @OneToMany(mappedBy = "${toLowerFirst(mapping.masterClass)}")
        private List<${mapping.slaveClass}> ${toLowerFirst(mapping.slaveClass)}s;
    <#elseif (mapping.mappingType == 3)>
        @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY)
        @JoinColumn(name = "${mapping.joinColumns}")
        private ${mapping.masterClass} ${toLowerFirst(mapping.masterClass)};
    <#elseif (mapping.mappingType == 4)>
        @ManyToMany(cascade = { CascadeType.MERGE, CascadeType.PERSIST }, fetch = FetchType.LAZY, targetEntity = ${mapping.slaveClass}.class)
        @JoinTable(name = "${mapping.midTabel}", joinColumns = @JoinColumn(name = "${mapping.joinColumns}"), inverseJoinColumns = @JoinColumn(name = "${mapping.inverseJoinColumns}"))
        private List<${mapping.slaveClass}> ${toLowerFirst(mapping.slaveClass)}s;
    </#if>

</#list>
        public ${entity.entityName}() {

        }

<#if (entity.entityId.entityIdList?size > 1)>

<#elseif (entity.entityId.entityIdList?size == 1)>
    <#list entity.entityId.entityIdList as eid>
        public void set${toUpperFirst(eid.name)} (${eid.typeName} ${eid.name}) {
                this.${eid.name} = ${eid.name};
        }

        public ${eid.typeName} get${toUpperFirst(eid.name)}() {
                return ${eid.name};
        }

    </#list>
</#if>
<#list entity.propList as prop>
        public void set${toUpperFirst(prop.name)} (${prop.typeName} ${prop.name}) {
                this.${prop.name} = ${prop.name};
        }

        public ${prop.typeName} get${toUpperFirst(prop.name)}() {
                return ${prop.name};
        }

</#list>
<#list entity.entityMappingList as mapping>
    <#if (mapping.prop??)>
        public void set${toUpperFirst(mapping.prop.name)} (${mapping.prop.typeName} ${mapping.prop.name}) {
                this.${mapping.prop.name} = ${mapping.prop.name};
        }

        public ${mapping.prop.typeName} get${toUpperFirst(mapping.prop.name)}() {
                return ${mapping.prop.name};
        }
    </#if>
</#list>
}
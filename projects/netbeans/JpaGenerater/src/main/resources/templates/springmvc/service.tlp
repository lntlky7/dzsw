package ${entity.packagePrefix}.service;

import java.util.ArrayList;
import java.util.List;

import ${entity.packagePrefix}.entity.${entity.entityName}Entity;
import ${entity.packagePrefix}.dao.I${entity.entityName}Dao;
import ${entity.packagePrefix}.view.${entity.entityName}View;

/**
 * Description ${entity.comment}
 * CreateDate ${entity.createTime}
 * @author ${entity.author}
 */
@Service("${entity.entityName}Service")
public class ${entity.entityName}ServiceImpl implements I${entity.entityName}Service {

    @Autowired
    private I${entity.entityName}Dao ${toLowerFirst(entity.entityName)}Dao;

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View save(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = new ${entity.entityName}Entity();

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View update(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = ${toLowerFirst(entity.entityName)}Dao.get${entity.entityName}EntityById(view.getId());

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View saveOrUpdate(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = ${toLowerFirst(entity.entityName)}Dao.get${entity.entityName}EntityById(view.getId());

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public void remove(Serializable id) {
        ${entity.entityName}Entity entity = this.${toLowerFirst(entity.entityName)}Dao.get${entity.entityName}EntityById(id);
        entity.setValidFlag(0);
        LogCache.getInstance().clear();
        LogCache.getInstance().putTableName(${entity.entityName}Entity.TABLE_NAME);
        LogCache.getInstance().putPrimaryKey(${entity.entityName}Entity.TABLE_NAME, entity.get${entity.entityName}Id());
        this.${toLowerFirst(entity.entityName)}Dao.update(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public void removeByIds(Serializable[] ids) {
        LogCache.getInstance().putTableName(RoleEntity.TABLE_NAME);
        for (Serializable id : ids) {
            ${entity.entityName}Entity entity = this.${toLowerFirst(entity.entityName)}Dao.get${entity.entityName}EntityById(id);
            entity.setValidFlag(0);
            this.${toLowerFirst(entity.entityName)}Dao.update(entity);
            LogCache.getInstance().putPrimaryKey(${entity.entityName}Entity.TABLE_NAME, id);
        }
    }

    @Transactional(readOnly = true)
    @Override
    public Pages find${entity.entityName}List(Pages pages) {
        if (pages.getTotalCount() == -1) {
            pages.setTotalCount(this.${toLowerFirst(entity.entityName)}Dao.getEntityPagingCount());
        }
        pages.executeCount();
        List<${entity.entityName}View> viewList = new ArrayList<${entity.entityName}View>();
        List<${entity.entityName}Entity> entityList = this.${toLowerFirst(entity.entityName)}Dao.get${entity.entityName}EntityPaging(pages.getStartRecord(), pages.getPageSize());
        for (${entity.entityName}Entity entity : entityList) {
            ${entity.entityName}View view = new ${entity.entityName}View(entity);
            viewList.add(view);
        }
        pages.setObjectList(viewList);
        return pages;
    }
}
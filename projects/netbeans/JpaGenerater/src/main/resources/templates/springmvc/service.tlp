package ${entity.packagePrefix}.service;

import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import ${entity.packagePrefix}.entity.${entity.entityName}Entity;
import ${entity.packagePrefix}.dao.I${entity.entityName}Dao;
import ${entity.packagePrefix}.view.${entity.entityName}View;
import com.rgsc.web.common.Pages;

/**
 * Description ${entity.comment}
 * CreateDate ${entity.createTime}
 * @author ${entity.author}
 */
@Service("${toLowerFirst(entity.entityName)}Service")
public class ${entity.entityName}ServiceImpl implements I${entity.entityName}Service {

    @Autowired
    private I${entity.entityName}Dao ${toLowerFirst(entity.entityName)}Dao;

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View save(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = new ${entity.entityName}Entity();

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View update(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = ${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityById(view.getId());

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public ${entity.entityName}View saveOrUpdate(${entity.entityName}View view) {
        ${entity.entityName}Entity entity = ${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityById(view.getId());

        return new ${entity.entityName}View(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public void remove(Serializable id) {
        ${entity.entityName}Entity entity = this.${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityById(id);
        
        this.${toLowerFirst(entity.entityName)}Dao.update(entity);
    }

    @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { Exception.class })
    @Override
    public void removeByIds(Serializable[] ids) {
        for (Serializable id : ids) {
            ${entity.entityName}Entity entity = this.${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityById(id);
            
            this.${toLowerFirst(entity.entityName)}Dao.update(entity);
        }
    }

    @Transactional(readOnly = true)
    @Override
    public Pages find${entity.entityName}List(Pages pages) {
        if (pages.getTotalCount() == -1) {
            pages.setTotalCount(this.${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityPagingCount());
        }
        pages.executeCount();
        List<${entity.entityName}View> viewList = new ArrayList<${entity.entityName}View>();
        List<${entity.entityName}Entity> entityList = this.${toLowerFirst(entity.entityName)}Dao.get${toUpperFirst(entity.entityName)}EntityPaging(pages.getStartRecord(), pages.getPageSize());
        for (${entity.entityName}Entity entity : entityList) {
            ${entity.entityName}View view = new ${entity.entityName}View(entity);
            viewList.add(view);
        }
        pages.setObjectList(viewList);
        return pages;
    }
}